.secondary-text,
.icon,
i {
  color: rgba(0, 0, 0, 0.54);
}

// Material colors map
$matColorsMap: (
  primary: $primary,
  accent: $accent,
  red: $mat-red,
  green: $mat-green,
  white: $mat-white,
);

// Material color hues list
$matColorHues: 50, 100, 200, 300, 400, 500, 600, 700, 800, 900, A100, A200, A400,
  A700;

@mixin generateMaterialElementColors($contrastColor) {
  // If the contrast color is white...
  $foreground: (
    base: white,
    text: white,
  );

  // If the contrast color is black...
  @if (rgba(black, 1) == rgba($contrastColor, 1)) {
    $foreground: (
      base: black,
    );
  }
}

// Color classes generator mixin
@mixin generateColorClasses($colorName, $color, $contrastColor, $hue) {
  .#{"" + $colorName}#{$hue}-bg {
    background-color: $color !important;
  }

  .mat-#{"" + $colorName}#{$hue}-bg {
    background-color: $color !important;
    color: $contrastColor !important;

    // Generate material element colors
    // based on current contrast color
    @include generateMaterialElementColors($contrastColor);

    &[disabled] {
      background-color: rgba($color, 0.12) !important;
      color: rgba($contrastColor, 0.26) !important;
    }
  }

  .#{"" + $colorName}#{$hue}-fg {
    color: $color !important;

    // Generate material element colors
    // based on current contrast color
    @include generateMaterialElementColors($color);
  }

  .#{"" + $colorName}#{$hue}-border {
    border-color: $color !important;
  }

  .#{"" + $colorName}#{$hue}-border-top {
    border-top-color: $color !important;
  }

  .#{"" + $colorName}#{$hue}-border-right {
    border-right-color: $color !important;
  }

  .#{"" + $colorName}#{$hue}-border-bottom {
    border-bottom-color: $color !important;
  }

  .#{"" + $colorName}#{$hue}-border-left {
    border-left-color: $color !important;
  }
}

// Generate the color classes...
@each $colorName, $colorMap in $matColorsMap {
  @each $hue in $matColorHues {
    $color: map-get($colorMap, $hue);
    $contrastColor: map-get(map-get($colorMap, "contrast"), $hue);

    @if ($color != null and $contrastColor != null) {
      @include generateColorClasses(
        $colorName,
        $color,
        $contrastColor,
        "-#{$hue}"
      );

      // Run the generator one more time for default values (500)
      @if ($hue == 500) {
        @include generateColorClasses($colorName, $color, $contrastColor, "");
      }
    }
  }
}
